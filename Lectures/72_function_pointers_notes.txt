ðŸ”¹ FUNCTION POINTERS IN C - LEC 72

ðŸ“Œ What is a function pointer?
- A function pointer stores the address of a function.
- It can be used to call functions indirectly.

ðŸ“Œ Syntax:
    return_type (*pointer_name)(arg_type1, arg_type2, ...);

ðŸ“Œ Example:
    int add(int a, int b);
    int (*ptr)(int, int) = add;
    int result = ptr(2, 3); // calls add(2, 3)

ðŸ“Œ Why use function pointers?
- To pass a function as a parameter
- Useful in callback mechanisms
- Helps in implementing function tables or menu systems

ðŸ“Œ Passing function pointer to another function:
    void print_result(int (*fptr)(int, int), int x, int y) {
        printf("%d\n", fptr(x, y));
    }

âœ… Applications:
- Sorting algorithms (like qsort in stdlib.h)
- Event handling
- Command processing
